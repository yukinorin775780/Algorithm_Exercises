//方法1: 先整个字符串反转，再反转前面的，最后反转后面 n 个。
class Solution {
    public String reverseLeftWords(String s, int n) {
        char[] ch = s.toCharArray();
        reverse(ch, 0, ch.length - 1);//先整个字符串反转
        reverse(ch, 0, ch.length - n - 1);//再反转前length-n-1个
        reverse(ch, ch.length - n, ch.length - 1);//再反转length-n到最后
        return new String(ch);
    }
    //反转字符串
    public void reverse(char[] ch,int left,int right){
        while(left < right){
            ch[left] ^= ch[right];
            ch[right] ^= ch[left];
            ch[left] ^= ch[right];
            left++;
            right--;
        }
    }
}

方法2:先反转前n个，再反转n到末尾，最后反转整个字符串。
class Solution {
    public String reverseLeftWords(String s, int n) {
        int len = s.length();
        StringBuilder sb = new StringBuilder(s);
        reverseString(sb,0,n-1);//1.反转区间为前n的子串
        reverseString(sb,n,len-1);//2.反转区间为n到末尾的子串
        return sb.reverse().toString();//3.反转整个字符串
    }
    //反转字符串
    public void reverseString(StringBuilder sb,int start,int end){
        while(start < end){
            char temp = sb.charAt(start);
            sb.setCharAt(start, sb.charAt(end));
            sb.setCharAt(end, temp);
            start++;
            end--;
        }
    }
}
