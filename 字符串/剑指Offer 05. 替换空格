//方法1: 创建新对象复制遇空格替换
class Solution {
    //使用一个新的对象，复制s,复制过程中对其判断，是空格则替换，否则直接复制，类似于数组复制
    public String replaceSpace(String s) {
        if(s == null){
            return null;
        }
        //选用StringBuilder 单线程使用，比较快
        StringBuilder sb = new StringBuilder();
        //使用 sb 逐个复制 s, 碰到空格则替换，否则直接复制
        for(int i = 0; i < s.length(); i++){
            //s.charAt(i)为char类型,为了比较需要将其转为和 " " 相同的字符串类型
            if(s.charAt(i) == ' '){//if(" ".equals(String.valueOf(s.charAt(i)))){}
                sb.append("%20");
            }else{
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}

//方法2: 双指针,从后往前遍历
class Solution {
    public String replaceSpace(String s) {
        if(s == null || s.length() == 0){
            return s;
        }
        //扩充空间，空格数量2倍
        StringBuilder str = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == ' '){
                str.append("  ");//两个空格
            }
        }
        //若没有空格直接返回
        if(str.length() == 0){
            return s;
        }
        //有空格，定义双指针从后往前遍历;
        int left = s.length() - 1;//左指针: 指向原始字符串的最后一个位置
        s += str.toString();
        int right = s.length() - 1;//右指针: 指向扩展字符串的最后一个位置
        char[] ch = s.toCharArray();
        while(left >= 0){
            if(ch[left] == ' '){
                ch[right--] = '0';
                ch[right--] = '2';
                ch[right] = '%';
            }else{
                ch[right] = ch[left];
            }
            left--;
            right--;
        }
        return new String(ch); 
    }
}
