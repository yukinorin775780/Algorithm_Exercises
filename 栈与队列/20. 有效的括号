class Solution {
    public boolean isValid(String s) {
        Deque<Character> deque = new LinkedList<>();
        char ch;
        if(s.length() % 2 != 0){
            return false;
        }
        for(int i = 0; i < s.length(); i++){
            ch = s.charAt(i);
            if(ch == '('){
                deque.push(')');
            }else if(ch == '['){
                deque.push(']');
            }else if(ch == '{'){
                deque.push('}');
            //先判断栈是否为空，再判断栈顶元素不等于当前遍历的元素，如果交换顺序容易出现空栈异常即栈为空时取栈顶元素
            }else if(deque.isEmpty() || deque.peek() != ch){
                return false;
            }else{//如果右括号和栈顶元素匹配则弹出
                deque.pop();
            }
        }
        //判断栈是否为空,不为空则说明左括号多了不匹配
        return deque.isEmpty();
    }
}
