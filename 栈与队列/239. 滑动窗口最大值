//方法1: 自定义队列，可以进行队尾的出队操作
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 1){
            return nums;
        }
        //存放结果元素的数组
        int[] res = new int[nums.length - k + 1];
        int num = 0;
        //自定义队列
        MyQueue mq = new MyQueue();
        //先将前k个元素放入队列
        for(int i = 0 ; i < k ; i++){
            mq.add(nums[i]);
        }
        //返回第一个窗口中元素的最大值
        res[num++] = mq.peek();
        for(int i = k ; i < nums.length ; i++){
            //滑动窗口移除最前面的元素，移除时判断该元素是否在队列中
            mq.poll(nums[i-k]);
            //滑动窗口加入最后面的元素，加入时判断队尾有无比它小的元素，有则先弹出比他小的元素后入队
            mq.add(nums[i]);
            //记录当前对应的最大值
            res[num++] = mq.peek();
        }
        return res;
    }
}

//自定义队列
class MyQueue{
    Deque<Integer> deque = new LinkedList<>();
    //弹出元素时，比较当前要弹出的元素是否等于队列出口的数值，如果相等则弹出
    //同时判断队列是否为空
    void poll(int val){
        if(!deque.isEmpty() && deque.peek() == val){
            deque.poll();
        }
    }
    //添加元素时，如果要添加的元素大于队列入口处元素，就将入口元素弹出，保证队列元素单调递减
    //比如此时队列是3,1 2将要入队，比1大，所以将1弹出，此时队列: 3,2
    void add(int val){
        while(!deque.isEmpty() && val > deque.getLast()){
            deque.removeLast();
        }
        deque.add(val);
    }
    //队列的栈顶元素始终为最大值
    int peek(){
        return deque.peek();
    }
}

//方法2: 利用双端队列手动实现单调队列
/*
用一个单调队列来存储对应的下标，每当窗口滑动时，直接取队列的头部指针对应的值放入结果集即可 
*/
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        ArrayDeque<Integer> deque = new ArrayDeque<>();
        //结果集
        int[] res = new int[nums.length - k + 1];
        int idx = 0;
        for(int i = 0 ; i < nums.length ; i++){
            //根据题意，i为nums下标，是要在[i - k + 1, i]中选到最大值，只需要保证两点
            //1.队列头结点需要在[i - k + 1, i]范围内，否则弹出
            while(!deque.isEmpty() && deque.peek() < i - k + 1){
                deque.poll();
            }
            //2.既然是单调，需要保证每次放进去的数字都要比末尾的都大，否则也弹出
            while(!deque.isEmpty() && nums[deque.peekLast()] < nums[i]){
                deque.pollLast();
            }

            deque.offer(i);

            //因为单调，当i增长到符合第一个k范围的时候，每滑动一步都要将队列头结点放入结果集
            if(i >= k - 1){
                res[idx++] = nums[deque.peek()];
            }
        }
        
        return res;
    }
}
