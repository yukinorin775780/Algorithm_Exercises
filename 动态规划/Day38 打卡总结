完全背包
力扣上没有纯粹的完全背包的题目，所以大家看本篇了解一下 完全背包的理论
文章讲解: https://programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html
视频讲解: https://www.bilibili.com/video/BV1uK411o7c9

518. 零钱兑换 II
题目链接: https://leetcode.cn/problems/coin-change-ii/
文章讲解: https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html
视频讲解: https://www.bilibili.com/video/BV1KM411k75j

377. 组合总和 Ⅳ
题目链接: https://leetcode.cn/problems/combination-sum-iv/
文章讲解: https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html
视频讲解: https://www.bilibili.com/video/BV1V14y1n7B6

● 自己看到题目的第一想法：
518. 典型的完全背包的运用题:amount是背包容量, coins是物品集合，coins的值为物体重量和物品价值。
377. 完全背包问题，求的是有多少种方法，而且方法是排列不是组合！那就通过交换遍历顺序，先遍历背包再遍历物品得到排列！

● 看完代码随想录之后的想法：
完全背包和01背包再在代码上的区别就是内层for循环也是顺序遍历。这样可以让物品多重复放多次。以及01背包是先物品后背包容量，对于完全背包而言两者可以互换顺序。
动规五部曲: 
1. 确定dp数组以及下标的含义: dp[j] 装满背包容量为j的背包有dp[j]种方法
2. 确定递推公式: dp[j] += dp[j-coins[i]]
3. dp数组如何初始化: dp[0]=1 
4. 确定遍历顺序: 此题和纯完全背包有一定区别:纯完全背包求的是最大价值，而本题求的是有多少种办法。所以在遍历顺序上有不同！！
   如果先遍历背包再遍历物品得到的是排列的结果，所以必须要先遍历物品再遍历背包得到的才是组合的结果。
5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。

518. 动规五部曲: 
1. 确定dp数组以及下标的含义: dp[j] 装满背包容量为j的背包有dp[j]种方法
2. 确定递推公式: dp[j] += dp[j-coins[i]]
3. dp数组如何初始化: dp[0]=1 
4. 确定遍历顺序: 此题和纯完全背包有一定区别:纯完全背包求的是最大价值，而本题求的是有多少种办法。所以在遍历顺序上有不同！！
   如果先遍历背包再遍历物品得到的是排列的结果，所以必须要先遍历物品再遍历背包得到的才是组合的结果。
5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。
377. 本题和上题的区别在于本题求的是排列数，上题是组合数动规五部曲: 
1. 确定dp数组以及下标的含义: dp[i] 装满背包容量为i的背包有dp[i]种方法
2. 确定递推公式: dp[i] += dp[i-nums[i]]
3. dp数组如何初始化: dp[0] = 1
4. 确定遍历顺序: 因为求的是排列数，所以要先顺序遍历背包容量，再顺序遍历物品。
5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。

● 自己实现过程中遇到哪些困难或者错误：
518. 实现的时候并没有深究动规五部曲，而是跟着之前的感觉写，落下了初始化dp数组这一步。
在求装满背包有多少种方法时，公式都是 dp[j] += dp[j - nums[i]]
377. 总结: 完全背包两层for循环的顺序可以对调。当遇到求有多少种方法的完全背包问题时要分清方法是排列还是组合，求的是组合数(不强调集合里元素的顺序)要先遍历物品再遍历背包；求的是集合数(强调集合里元素的顺序)就要先遍历背包再遍历物品！
