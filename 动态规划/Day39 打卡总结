70. 爬楼梯(进阶)
题目链接: https://leetcode.cn/problems/climbing-stairs/
文章讲解: https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.html
322. 零钱兑换
题目链接: 
文章讲解: https://programmercarl.com/0322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html
视频讲解: https://www.bilibili.com/video/BV14K411R7yv
279.完全平方数
题目链接: 
文章讲解: https://programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html
视频讲解：https://www.bilibili.com/video/BV12P411T7Br

● 自己看到题目的第一想法：
70. 把每次可以爬的台阶数[1,2]看作是可以无限用的物品，n是背包的容量，求装满背包有多少种办法，所以递推公式是 dp[i] += dp[i-nums[j]]
322. coins是无限可用的物品，amount是背包的容量，求的是装满背包最少用多少件物品，不知道该怎么做...
279. 

● 看完代码随想录之后的想法：
70. 动规五部曲: 
    1. 确定dp数组以及下标的含义: dp[i] 爬到有i个台阶的楼顶有dp[i]个方法
    2. 确定递推公式: dp[i] += dp[i-]
    3. dp数组如何初始化: dp[0] = 1
    4. 确定遍历顺序: 求排列，所以是先遍历背包再遍历物品。
    5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。
322. 动规五部曲: 
     1. 确定dp数组以及下标的含义: dp[j] 装满容量为j的背包最少物品为dp[j], 最终要求dp[amount]
     2. 确定递推公式: dp[j] = Math.min(dp[j], dp[j-coins[i]]+1)
     3. dp数组如何初始化: dp[0]=0; dp[非0下标]= int最大值 由递推公式发现是取最小值，所以应该初始化为int的最大值
     4. 确定遍历顺序: 本题求的是最小值，所以无论是先遍历物品再遍历背包求组合数还是先遍历背包再遍历物品求排列数都不影响最终的结果。
     5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。
279. 动规五部曲: 
     1. 确定dp数组以及下标的含义: 
     2. 确定递推公式: 
     3. dp数组如何初始化: 
     4. 确定遍历顺序: 
     5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。

● 自己实现过程中遇到哪些困难或者错误：
70. 无
322. 无
279. 
