123.买卖股票的最佳时机III
题目链接: https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/
文章讲解: https://programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.html
视频讲解: https://www.bilibili.com/video/BV1WG411K7AR

188.买卖股票的最佳时机IV
题目链接: https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/
文章讲解: https://programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html
视频讲解: https://www.bilibili.com/video/BV16M411U7XJ

● 自己看到题目的第一想法：
123. 好难 没有想法...
188. 至多买卖两次可以由二维数组第二个元素的不同情况来表示最佳，但是本题是k次就不知道怎么用二维数组来实现。

● 看完代码随想录之后的想法：
123. 将至多两次买入分为不同的情况讨论动规五部曲: 
1. 确定dp数组以及下标的含义: dp[i][0] 不操作 dp[i][1] 第一次持有/买入 dp[i][2] 第一次不持有/卖出 dp[i][3] 第二次持有/买入 dp[i][4] 第二次不持有/卖出
2. 确定递推公式: 
dp[i][0] = dp[i-1][0]; 因为不操作所以没有持有，肯定为0。
dp[i][1] = max(dp[i-1][1]「前一天持有」, dp[i-1][0] - prices[i]「第i天买入」);
dp[i][2] = max(dp[i-1][2]「前一天不持有」, dp[i-1][1] + prices[i]「第i天卖出」);
dp[i][3] = max(dp[i-1][3]「前一天第二次持有」, dp[i-1][2] - prices[i]「第i天第二次买入」);
dp[i][4] = max(dp[i-1][4]「前一天第二次不持有」, dp[i-1][3] + prices[i]「第i天第二次卖出」);
3. dp数组如何初始化: dp[0][0] = 0; dp[0][1] = -prices[0]; dp[0][2] = 0(同一天买卖); dp[0][3] = -prices[0] ;dp[0][4] = 0; 
4. 确定遍历顺序: 从左向右，因为dp[i]是由 dp[i-1]推导来的。
5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。
188. 二维数组的第二位的元素大小为 2k+1; 用for循环实现多次的买入卖出 买入是j+1 卖出是j+2 j+=2；
递推公式:
dp[i][j+1] = max( dp[i-1][j+1], dp[i-1][j] - prices[i]);
dp[i][j+2] = max(dp[i-1][j+2], dp[i-1][j+1] + prices[i]);
初始化:
j=1; j<2k; j+=2 二维下标为奇数是为-prices[i]，偶数为0 
● 自己实现过程中遇到哪些困难或者错误：
123. 无
188. 难点在于用j来表示第二个维度的下标。通过2次买卖来推出k次买卖的规律，用j来抽象表示规律。
