理论基础
文章讲解: https://programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html
视频链接: https://www.bilibili.com/video/BV13Q4y197Wg

509. 斐波那契数
题目链接: https://leetcode.cn/problems/fibonacci-number/
文章讲解: https://programmercarl.com/0509.%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0.html
视频链接: https://www.bilibili.com/video/BV1f5411K7mo

70. 爬楼梯
题目链接: https://leetcode.cn/problems/climbing-stairs/
文章讲解: https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html
视频链接: https://www.bilibili.com/video/BV17h411h7UH

746. 使用最小花费爬楼梯
题目链接: 
文章讲解: https://programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html
视频链接: https://www.bilibili.com/video/BV16G411c7yZ

● 自己看到题目的第一想法：
509. 第一次接触动态规划，不知道斐波那契数列与动态规划有什么关系，一般都是用递归。
70. 
746. 

● 看完代码随想录之后的想法：
509. 用动态规划的思想解决斐波那契数列，动规五部曲: 
     1. 确定dp数组以及下标的含义: dp[i] 表示第i个斐波那契数列的值
     2. 确定递推公式: dp[i] = dp[i-1] + dp[i-2]
     3. dp数组如何初始化: dp[0] = 0; dp[1] = 1;
     4. 确定遍历顺序: 从前向后遍历，才能保证dp[i] 是由最新的dp[i-1]和dp[i-2]更新。
     5. 打印dp数组(用于debug): 用来判断是否是斐波那契数列来判断代码哪里出了问题。
70. 1阶 有1种办法；2阶 有2种办法；3阶则可以通过 1阶和2阶推导出来，因为3阶最后一定还剩下1阶或是2阶。同样4阶一定从第2阶或第3阶迈上来。以此类推，所以动规五部曲: 
     1. 确定dp数组以及下标的含义: dp[i] 达到第i阶有dp[i]种方法 
     2. 确定递推公式: dp[i] = dp[i-1] + dp[i-1];
     3. dp数组如何初始化: dp[0] = 0; dp[1] = 1; dp[2] = 2; 0阶即dp[0]在本题是无意义的。
     4. 确定遍历顺序: 从前向后，因为dp[i]依赖前面两位的数值
     5. 打印dp数组(用于debug): 用来dp数组是否符合题目要求从而判断代码哪里出了问题。
746. 

● 自己实现过程中遇到哪些困难或者错误：
509. 无
70. 注意dp[0]= 0 or 1 之间的区别
746. 
