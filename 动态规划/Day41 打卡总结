198.打家劫舍
题目链接: https://leetcode.cn/problems/house-robber/
文章讲解: https://programmercarl.com/0198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html
视频讲解: https://www.bilibili.com/video/BV1Te411N7SX

213.打家劫舍II
题目链接: https://leetcode.cn/problems/house-robber-ii/
文章讲解: https://programmercarl.com/0213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII.html
视频讲解: https://www.bilibili.com/video/BV1oM411B7xq

337.打家劫舍III
题目链接: 
文章讲解: https://programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html
视频讲解: https://www.bilibili.com/video/BV1H24y1Q7sY

● 自己看到题目的第一想法：
198. 第一次接触，没有想法...
213. 与198的区别是数组是首尾相连的，所以要考虑到第一个元素和最后一个元素之间的关系。不知道该怎么处理...
337. 

● 看完代码随想录之后的想法：
198. 动规五部曲: 
    1. 确定dp数组以及下标的含义: dp[i] 考虑下标i(包含)，所偷的最大金币数量为 dp[i] 
    2. 确定递推公式: 偷i时: nums[i]+dp[i-2], 不偷i时: dp[i-1]。所以递推公式是 Math.max(dp[i-1], dp[i-2] + nums[i])
    3. dp数组如何初始化: dp[0] = nums[0]; dp[1] = Math.max(nums[0], nums[1]);
    4. 确定遍历顺序: 从小到大，从i=2开始遍历
    5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。
213. 因为首尾相连连成一个环，所以可以分成三种情况讨论: 
     1. 不考虑首尾元素，只考虑中间，那么一个线性数组就跟打家劫舍处理方式一样。 
     2. 考虑首元素不考虑尾元素，也是一个线性数组。
     3.不考虑首元素考虑尾元素，也是一个线性数组。
     情况1包含在情况2或情况3之中。所以求情况2和情况3的最优解取最大值就是此题要求的答案。把环形的问题转换成线性的问题。
337. 
    动规五部曲: 
    1. 确定dp数组以及下标的含义: dp[i] 字符串长度为i，能被单词组成时，dp[i]为true
    2. 确定递推公式: 如果区间[j,i]出现在单词词典中的同时dp[j]==true，那么dp[i]==true
    3. dp数组如何初始化: dp[0] = true; dp[非零下标] = false
    4. 确定遍历顺序: 本题单词的组成是有顺序的，所以求的是排列数而不是组合数，所以先遍历背包再遍历物品。
    5. 打印dp数组(用于debug): 判断dp数组是否符合题目要求从而判断代码哪里出了问题。

● 自己实现过程中遇到哪些困难或者错误：
198. 无
213. 遇到环形问题时时常找不到起始点和终止点，所以可以将环形问题转变成线性问题，分成不同的情况来求解！
     要注意数组的下标包含问题
337. 
