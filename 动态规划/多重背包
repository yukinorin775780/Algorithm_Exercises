//版本1: 改变物品数量为01背包格式
public void testMulitiPack1(){
  List<Integer> weight = new ArrayList<>(Arrays.asList(1,3,4));
  List<Integer> value = new ArrayList<>(Arrays.asList(15,20,30));
  List<Integer> nums = new ArrayList<>(Arrays.asList(2,3,2));
  int bagWeight = 10;
  
  for(int i=0; i < nums.size(); i++){
    while(nums.get(i) > 1){ //把物品展开为i
      weight.add(weight(i));
      value.add(value(i));
      nums.set(i, nums.get(i) - 1);
    }
  }
  
  int[] dp = new int[bagWeight + 1];
  for(int i = 0; i < weight.size(); i++){ //遍历物品
    for(int j = bagWeight; j >= weight.get(i); j--){ //遍历背包容量
      dp[j] = Math.max(dp[j], dp[j - weight.get(i)] + value.get(i));
    }
  }
  System.out.println(Arrays.toString(dp));
}
// 版本二：改变遍历个数
public void testMultiPack2(){
    int[] weight = new int[] {1, 3, 4};
    int[] value = new int[] {15, 20, 30};
    int[] nums = new int[] {2, 3, 2};
    int bagWeight = 10;

    int[] dp = new int[bagWeight + 1];
    for(int i = 0; i < weight.length; i++) { // 遍历物品
        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
            // 以上为01背包，然后加一个遍历个数
            for (int k = 1; k <= nums[i] && (j - k * weight[i]) >= 0; k++) { // 遍历个数
                dp[j] = Math.max(dp[j], dp[j - k * weight[i]] + k * value[i]);
            }
            System.out.println(Arrays.toString(dp));
        }
    }
}
