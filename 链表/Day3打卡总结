链表理论基础: https://programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html

203.移除链表元素

题目链接: https://leetcode.cn/problems/remove-linked-list-elements/
文章讲解/视频讲解：https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html

707.设计链表
题目链接: https://leetcode.cn/problems/design-linked-list/
文章讲解/视频讲解：https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html

206.反转链表
题目链接: https://leetcode.cn/problems/reverse-linked-list/
文章讲解/视频讲解：https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html

● 自己看到题目的第一想法：
203.大学在学数据结构与算法的时候有相关的练习，要分为两个情况，如果要删除的是头节点，那就直接让head = head.next就行了。但如果不是头节点，那就需要一个节点去记录当前节点的上一个节点。
在删除节点时让上一个节点的next = 上一个节点的next.next，在这之后要更新上一个节点，也就是pre = pre.next。
707.学过，思路是有的但是完成度不高，总有些地方有点瑕疵导致运行不成功，比如循环的终止条件。
206.只想到了找到最后一个，和倒数第二个，然后转方向。

● 看完代码随想录之后的想法：
203.要注意：头节点是不能改变的，因为要return，所以只能把头节点赋给其它节点！！！！方法一的思路是一致的，方法二用虚拟头节点，会更容易理解，但是思路都是一样的。
707.时时刻刻思考第0个节点的情况！！自己定义的head是虚拟头节点！！在寻找Tail时最后的方法是while(cur.next!=null)，不要用for！
206.双指针：想像成把头变成尾，把尾变成头，实现的方式就是调转pre和cur的next。递归的思想就是双指针，结合双指针理解。

● 自己实现过程中遇到哪些困难或者错误：
203.自己想的方法与解题方法1一致，但是在自己实现的过程中，搞不清楚什么时候用循环，什么时候用if，判断条件也有些理不清，需要再仔细斟酌。
在用虚拟头节点是，最后return的是虚拟头节点的next而不是head。因为head有可能在循环的过程中被删除了。
707.自己定义的head是虚拟头节点！！！！在删除节点是size--得放在第二个if之前（即如果删除的是头节点），因为里面还有return语句，如果不放在这之前就不会运行到size--。
所以统一标准，在判断完index是合法的之后，size该++就++，该--就--。
206.在运用双指针是要注意定义一个临时变量用来储存cur.next。也要注意先移动pre，再移动cur。递归理解困难，一定要借助双指针对递归进行理解！！！
