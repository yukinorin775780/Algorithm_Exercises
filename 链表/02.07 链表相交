//方法1:末端对齐
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode curA = headA;
        ListNode curB = headB;
        int lenA = 0, lenB = 0;
        while(curA!=null){ //求链表A的长度
            lenA++;
            curA = curA.next;
        }
        while(curB!=null){//求链表B的长度
            lenB++;
            curB = curB.next;
        }
        curA = headA;
        curB = headB;
        //让curA是最长链表的表头,lenA为其长度
        if(lenB > lenA){
            //1.swap(lenA,lenB)
            int tmpLen = lenA;
            lenA = lenB;
            lenB = tmpLen;
            //2.swap(curA,curB)
            ListNode tmpNode = curA;
            curA = curB;
            curB = tmpNode;
        }
        //求长度差
        int gap = lenA - lenB;
        //让curA和curB在同一起点上(末尾位置对齐)
        while(gap-->0){
            curA = curA.next;            
        }
        //遍历curA和curB，遇到相同则直接返回
        while(curA!=null){
            if(curA==curB){
                return curA;
            }
            curA = curA.next;
            curB = curB.next;
        }
        //没找到
        return null;
    }
}

/*方法2:
设交集链表长c,链表1除交集的长度为a，链表2除交集的长度为b，有
1.a + c + b = b + c + a     相当于将两个链表拼接到一起使得末端对齐
2.若无交集，则a + b = b + a
*/

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode curA = headA;
        ListNode curB = headB;
        while(curA!=curB){
            curA = curA==null? headB : curA.next;
            curB = curB==null? headA : curB.next;
        }
        return curA;
    }
}
