/*利用addAtIndex实现addAtHead和addAtTail*/
//定义单链表
class ListNode{
    int val;
    ListNode next;
    ListNode(){}
    ListNode(int val){
        this.val = val;
    }
}

class MyLinkedList {

    int size;//链表元素的个数
    ListNode head;//定义虚拟头节点！！！！
    //构造器初始化链表
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
    }
    //获取第index个节点的数值，注意index从0开始，第0个节点就是头节点
    public int get(int index) {
        if(index<0 || index >=size){//索引无效
            return -1;
        }
        ListNode cur = head;
        //包含一个虚拟的头节点，所以查找第index+1个节点
        for(int i=0;i<=index;i++){
            cur = cur.next;
        }
        return cur.val;
    }
    
    public void addAtHead(int val) {
        //等于在第0个元素前添加
        addAtIndex(0,val);
    }
    
    public void addAtTail(int val) {
        //等于在末尾+1的元素前插入新节点。
        addAtIndex(size,val);
    }
    
    public void addAtIndex(int index, int val) {
        if(index>size){// index大于链表长度，则不会插入节点
            return;
        }
        if(index<0){// index小于0，则在头部插入节点
            index = 0;
        }
        ListNode pre = head;//索引之前的节点
        ListNode newNode = new ListNode(val);//要添加的节点
        for(int i=0;i<index;i++){
            pre = pre.next;
        }
        newNode.next = pre.next;
        pre.next = newNode;
        size++;
    }
    
    public void deleteAtIndex(int index) {
        if(index<0||index>=size){//index无效
            return;
        }
        size--;
        if(index==0){//删除头节点
            head = head.next;
            return;
        }
        ListNode pre = head;
        for(int i=0;i<index;i++){//循环到index
            pre = pre.next;
        }
        pre.next = pre.next.next;
    }
}
/*不用addAtIndex来实现addAtHead和addAtTail*/
class ListNode{
    int val;
    ListNode next;
    ListNode(){}
    ListNode(int val){
        this.val = val;
    }
}

class MyLinkedList {

    int size;//链表元素的个数
    ListNode head;//定义虚拟头节点！！！！
    //构造器初始化链表
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
    }
    //获取第index个节点的数值，注意index从0开始，第0个节点就是头节点
    public int get(int index) {
        if(index<0 || index >=size){//索引无效
            return -1;
        }
        ListNode cur = head;
        //包含一个虚拟的头节点，所以查找第index+1个节点
        for(int i=0;i<=index;i++){
            cur = cur.next;
        }
        return cur.val;
    }
    
    public void addAtHead(int val) {
        ListNode newNode = new ListNode(val);
        size++;
        newNode.next = head.next;
        head.next = newNode;
    }

    public void addAtTail(int val) {
        ListNode newNode = new ListNode(val);
        ListNode cur = head;
        size++;
        while(cur.next!=null){
            cur = cur.next;
        }
        cur.next = newNode;
    }
    
    public void addAtIndex(int index, int val) {
        if(index>size){// index大于链表长度，则不会插入节点
            return;
        }
        if(index<0){// index小于0，则在头部插入节点
            index = 0;
        }
        ListNode pre = head;//索引之前的节点
        ListNode newNode = new ListNode(val);//要添加的节点
        for(int i=0;i<index;i++){
            pre = pre.next;
        }
        newNode.next = pre.next;
        pre.next = newNode;
        size++;
    }
    
    public void deleteAtIndex(int index) {
        if(index<0||index>=size){//index无效
            return;
        }
        size--;
        if(index==0){//删除头节点
            head = head.next;
            return;
        }
        ListNode pre = head;
        for(int i=0;i<index;i++){//循环到index
            pre = pre.next;
        }
        pre.next = pre.next.next;
    }
}
