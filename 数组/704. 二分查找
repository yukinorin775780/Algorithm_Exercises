//方法1: 左闭右闭
class Solution1 {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;// 定义target在左闭右闭的区间里，即[left,right]
        while(left <= right){// 当left==right时，区间[left,right]依然有效，所以用<=
            int middle = left+((right-left)/2);//防止溢出，等同于(left+right)/2
            if(nums[middle] > target){
                right = middle - 1;// target在左区间，所以[left,middle-1]
            }else if(nums[middle] < target){
                left = middle + 1;// target在右区间，所以[middle+1,right]
            }else //nums[middle] == target
                return middle; //在数组中找到目标值，直接返回下标
        }
        //未找到目标值
        return -1;
    }
}

//方法2:左闭右开
class Solution2 {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length;// 定义target在左闭右开的区间里，即[left,right)
        while(left < right){// 因为left==right时，在[left,right)是无效的空间，所以使用<
            int middle = (left + right) / 2;
            if(nums[middle] > target){
                right = middle;// target在左区间，在[left,middle)中
            }else if(nums[middle] < target){
                left = middle + 1;// target在右区间，在[middle+1,right)中
            }else //nums[middle] == target
                return middle;//在数组中找到目标值，直接返回下标
        }
        //未找到目标
        return -1;
    }
}
