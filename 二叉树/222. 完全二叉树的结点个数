//方法1: 针对完全二叉树的解法，分为若干个满二叉树。通过满二叉树计算结点公式 2^depth - 1
class Solution {
    //1. 递归函数的参数和返回值
    public int countNodes(TreeNode root) {
        //2. 终止条件
        if(root == null) return 0;
        TreeNode left = root.left;
        TreeNode right = root.right;
        int leftDepth = 0, rightDepth = 0;//为了位运算求指数方便所以初始为0
        while(left != null){ //求左子树深度
            left = left.left;
            leftDepth++;
        }
        while(right != null){ //求右子树深度
            right = right.right;
            rightDepth++;
        }
        if(leftDepth == rightDepth){
            return (2 << leftDepth) - 1; // 2<<1 相当于 2^2，所以初始值为0
        }
        //3.单层递归的逻辑
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
}

//方法2: 通用递归法，求树的结点
class Solution {
    //1. 递归函数的参数和返回值
    public int countNodes(TreeNode root) {
        //2. 终止条件
        if(root == null) return 0;
        //3. 单层递归逻辑 
        //后序遍历: 先求它的左子树的结点数量，再求它的右子树的结点数量，最后取和+1（1是中间结点）
        int leftCount = countNodes(root.left);
        int rightCount = countNodes(root.right);
        int treeCount = leftCount + rightCount + 1;
        return treeCount;
    }
}

//普通迭代法: 层序遍历
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        int res = 0;
        while(!que.isEmpty()){
            int size = que.size();
            while(size-- > 0){
                TreeNode cur = que.poll();
                res++;
                if(cur.left != null) que.offer(cur.left);
                if(cur.right != null) que.offer(cur.right);
            }
        }
        return res;
    }
}
