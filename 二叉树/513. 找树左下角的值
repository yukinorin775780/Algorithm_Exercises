//方法1: 递归法
class Solution {
    private int depth = -1;
    private int value = 0;
    public int findBottomLeftValue(TreeNode root) {
        value = root.val;
        findLeftValue(root, 0);
        return value;
    }

    private void findLeftValue(TreeNode root, int deep){
        if(root == null) return;
        if(root.left == null && root.right == null){//判断是否为叶子结点
            if(deep > depth){//当前叶子深度 > 已记录的最大深度
                value = root.value;//记录当前叶子结点值
                depth = deep;//记录最大深度
            }
        }
        //没有对deep的值先++后--而是直接deep+1，隐藏了回溯过程
        if(root.left != null) findLeftValue(root.left, deep + 1);
        if(root.right != null) findLeftValue(root.right, deep + 1);
    }
}

//方法2: 迭代法 层序遍历
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        int res = 0;
        while(!que.isEmpty()){
            int size = que.size();
            for(int i = 0; i < size ; i++ ){
                TreeNode cur = que.poll();
                if(i == 0){//每一行的第一个元素，遍历到最后一行即最底层最左边的结点
                    res = cur.val;
                }
                if(cur.left != null) que.offer(cur.left);
                if(cur.right != null) que.offer(cur.right);
            }
        }
        return res;
    }
}
