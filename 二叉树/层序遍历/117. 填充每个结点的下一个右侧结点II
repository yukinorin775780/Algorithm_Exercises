/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Queue<Node> que = new LinkedList<>();
        if(root != null) que.add(root);
        while(!que.isEmpty()){
            int size = que.size();
            Node nodePre = null;//当前结点的上一个结点
            Node node = null;//当前结点
            for(int i = 0 ; i < size ; i++){
                if(i == 0){
                    nodePre = que.poll();//取出本层的头结点
                    node = nodePre;
                }else{
                    node = que.poll();
                    nodePre.next = node;//本层前一个结点next指向当前结点
                    nodePre = nodePre.next;
                }
                if(node.left != null) que.add(node.left);
                if(node.right != null) que.add(node.right);
            }
            nodePre.next = null;//循环结束后即本层最后一个节点指向null
        }
        return root;
    }
}
