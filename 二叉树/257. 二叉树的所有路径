//方法1: 前序遍历 + 回溯
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>(); //存放最终结果
        if(root == null) return res;
        List<Integer> paths = new ArrayList<>(); //存放结果中的路径
        traversal(root, paths, res);
        return res;
    }
    //1.递归函数参数以及返回值
    public void traversal(TreeNode root, List<Integer> paths, List<String> res){
        paths.add(root.val);
        //2.终止条件
        //3.单层递归逻辑: 前序遍历，先处理中间结点。
        if(root.left == null && root.right == null){
            //输出
            StringBuilder sb = new StringBuilder();//用来拼接字符串，速度快
            for(int i = 0; i < paths.size() - 1; i ++){
                sb.append(paths.get(i)).append("->");
            }
            sb.append(paths.get(paths.size() - 1));//记录最后一个结点
            res.add(sb.toString());//收集一个路径
            return;
        }
        //递归和回溯是同时进行的，所以要放在一个花括号里
        if(root.left != null){ //左
            traversal(root.left, paths, res);
            paths.remove(paths.size() - 1); //回溯
        }
        if(root.right != null){ //右
            traversal(root.right, paths, res);
            paths.remove(paths.size() - 1); //回溯
        }
    }
}

//方法2: 迭代法 
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if(root == null) return res;
        Stack<Object> stack = new Stack<>();
        //结点和路径同时入栈
        stack.push(root);
        stack.push(root.val + "");
        while(!stack.isEmpty()){
            //结点和路径同时出栈
            String path = (String) stack.pop();
            TreeNode node = (TreeNode) stack.pop();
            //若找到叶子结点
            if(node.left == null && node.right == null){
                res.add(path);
            }
            //右子结点不为空
            if(node.right != null){
                stack.push(node.right);
                stack.push(path + "->" + node.right.val);
            }
            if(node.left != null){
                stack.push(node.left);
                stack.push(path + "->" + node.left.val);
            }
        }
        return res;
    }
}
