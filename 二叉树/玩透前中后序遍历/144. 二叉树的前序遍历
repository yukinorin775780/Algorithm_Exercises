//方法1: 递归法
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();//存储结果集
        preorder(root, res);
        return res;
    }

    public void preorder(TreeNode root, List<Integer> res){
        if(root == null){//终止条件
            return;
        }
        //前序遍历的搜索顺序是中左右
        res.add(root.val);//中
        preorder(root.left, res);//左
        preorder(root.right, res);//右
    }
}

//方法2: 迭代法
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        Stack<TreeNode> stack = new Stack<>();
        //前序遍历是中左右
        stack.push(root);//先将中压入栈
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            res.add(node.val);
            if(node.right!=null){//先放入右孩子
                stack.push(node.right);
            }
            if(node.left!=null){//再放入左孩子
                stack.push(node.left);
            }
        }
        return res;
    }
}

//方法3: 统一迭代法
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        if(root != null){
            stack.push(root);
        }
        while(!stack.isEmpty()){//当栈不为空时
            TreeNode node = stack.peek();//把当前指针指向栈顶元素
            if(node != null){//栈顶元素不为空时
                stack.pop();//将该结点弹出，避免重复操作，下面再将右中左节点添加到栈中
                if(node.right!=null){
                    stack.push(node.right);//添加右结点
                }
                if(node.left!=null){
                    stack.push(node.left);//添加左结点
                }
                stack.push(node);//添加中结点
                stack.push(null);//中结点访问过，但还没有处理，加入空结点做标记
            }else{//栈顶元素是空结点，才将下一个结点放入结果集
                stack.pop();//弹出空结点
                node = stack.peek();//重新取出栈顶结点
                stack.pop();
                res.add(node.val);//加入结果集
            }
        }
        return res;
    }
}
