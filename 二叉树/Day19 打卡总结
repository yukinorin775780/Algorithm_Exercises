235. 二叉搜索树的最近公共祖先
题目链接: https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/
文章讲解: https://programmercarl.com/0235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html
视频讲解: https://www.bilibili.com/video/BV1Zt4y1F7ww

701.二叉搜索树中的插入操作
题目链接: https://leetcode.cn/problems/insert-into-a-binary-search-tree/
文章讲解: https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html
视频讲解: https://www.bilibili.com/video/BV1Et4y1c78Y

450.删除二叉搜索树中的节点
题目链接: https://leetcode.cn/problems/delete-node-in-a-bst/
文章讲解: https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html
视频讲解: https://www.bilibili.com/video/BV1tP41177us

● 自己看到题目的第一想法：
235. BST的特点是有序的，如果要找到p和q的公共祖先，那么这个公共祖先一定在中序遍历数组p和q之间[p,q]。
701. 遍历二叉搜索树，找到符合条件的位置，如果结点为空就插入此结点。
450. 涉及到删除结点，那么就要更改树的整体结构。可以将删除结点的左右子树都保留，将左子树替换被删除结点，然后再通过插入结点算法把右子树的结点插入。

● 看完代码随想录之后的想法：
235. 在自己的想法的基础上还要满足的条件是p/q在该结点的左子树,q/p在该结点的右子树。从根结点开始遍历，如果当前结点的值大于p和q的值，说明p和q都在左子树中，遍历左子树；
     如果当前结点的值小于p和q的值，说明p和q都在右子树中，遍历右子树。esle: p<结点值<q 或 q<结点值<p 说明是最近的公共祖先。
701. 思路一致。不需要改变二叉树的结构。因为想插入的结点都可以成为二叉搜索树的某个叶子结点。通过返回当前插入的结点给到进遍历前结点的左右结点，成功将结点创建并连接。最后返回root。
450. 删除结点有5种不同的情况:
     1) 没有找到要删除的结点: 返回null
     2) 找到的结点是叶子结点: 直接删除
     3) 找到的结点左不空右空: 让其父结点直接指向其左节点。
     4) 找到的结点左空右不空: 让其父结点直接指向其右结点。
     5) 找到的结点左不空右不空: 直接将其父结点指向其右子树，再将其左子树安在右子树最左下角。
     在递归中，终止条件是找到目标结点，所以删除结点的逻辑也在终止条件中。

● 自己实现过程中遇到哪些困难或者错误：
235. 要理解为什么从上向下去遍历二叉搜索树的时候，遇到的第一个符合条件的结点(p<结点值<q)就是最近公共祖先。可以通过画一棵二叉搜素树来验证。
701. 要理解怎么将新创建的结点连接到树上。可以画图也可以看上面的想法。
450. 删除结点需要改变树的结构，要理清要删除结点的不同情况的解决方法。
