//方法1: 迭代法 层序遍历
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        int depth = 0;
        while(!que.isEmpty()){
            int size = que.size();
            depth++;
            while(size-- > 0){
                TreeNode cur = que.poll();
                //当前结点的左右子结点都为空，直接返回最小深度
                if(cur.left == null && cur.right == null){
                    return depth;
                }
                if(cur.left != null) que.offer(cur.left);
                if(cur.right != null) que.offer(cur.right);
            }
        }
        return depth;
    }
}

//方法2: 递归法
class Solution {
    //1.递归函数的参数和返回值
    public int minDepth(TreeNode root) {
        //2.终止条件
        if(root == null) return 0;
        //3.单层递归的逻辑
        int leftDepth = minDepth(root.left);
        int rightDepth = minDepth(root.right);
        if(root.left == null && root.right != null){
            return rightDepth + 1;
        }
        if(root.left != null && root.right == null){
            return leftDepth + 1;
        }
        //左右结点都不为null
        return Math.min(leftDepth, rightDepth) + 1;
    }
}

