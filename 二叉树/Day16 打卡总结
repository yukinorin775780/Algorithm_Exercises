513.找树左下角的值
题目链接: https://leetcode.cn/problems/find-bottom-left-tree-value/
文章讲解/视频讲解: https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html

112. 路径总和 
113. 路径总和ii
题目链接:

文章讲解/视频讲解: https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html

106.从中序与后序遍历序列构造二叉树 
105.从前序与中序遍历序列构造二叉树
题目链接:

文章讲解/视频讲解: https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html

● 自己看到题目的第一想法：
513. 层序遍历，最后一层的第一个元素即树左下角的值
112.
113.
106.
105.

● 看完代码随想录之后的想法：
513. 层序遍历的迭代法很好理解，相较而言，递归法更难。目标是找到左下角的值。翻译一下就是找到最深的靠左的叶子结点，所以递归法的遍历顺序无论前中后序遍历，都是先左后右，所以都可以。
     1. 确定递归函数的参数和返回值: 参数:根结点，还有一个int型变量记录深度。不需要返回值。
     2. 确定终止条件: 遇到叶子结点时，要更新叶子结点的深度。
     3. 确定单层递归的逻辑: 在找到最大深度时，递归过程依然需要使用回溯。可以理解为找到待定最深叶子结点后就返回了，没有对depth进行操作，所以要在递归之后depth--。
112.
113.
106.
105. 

● 自己实现过程中遇到哪些困难或者错误：
513. 无
112.
113.
106.
105.
