//方法1: 递归法
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        return traversal(root, targetSum - root.val);
    }
    public boolean traversal(TreeNode root, int count){
        //遇到叶子结点且计数为0
        if(root.left == null && root.right == null && count == 0) return true;
        //遇到叶子结点计数不为0
        if(root.left == null && root.right == null) return false; //直接返回

        if(root.left != null){ //左
            count -= root.left.val; //累减
            if(traversal(root.left, count)){//递归
                return true;
            }
            count += root.left.val; //回溯
        }
        if(root.right != null){ //右
            //递归 回溯隐藏在 count - root.right.val
            if(traversal(root.right, count - root.right.val)){
                return true;
            }
        }
        return false;
    }
}

//方法2: 迭代法 层序遍历 + 栈
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        Stack<TreeNode> st = new Stack<>(); //记录结点
        Stack<Integer> si = new Stack<>(); //记录从头结点到该结点的路径数值总和
        st.push(root);
        si.push(root.val);
        while(!st.isEmpty()){
            int size = st.size();
            while(size-- > 0){
                TreeNode cur = st.pop();
                int sum = si.pop();
                //如果该结点是叶子结点，同时该结点的路径数值=sum,返回true
                if(cur.left == null && cur.right == null && sum == targetSum) return true;
                //栈结构 先右后左并记录该结点的路径数值和
                if(cur.right != null){
                    st.push(cur.right);
                    si.push(cur.right.val + sum);
                }
                if(cur.left != null){
                    st.push(cur.left);
                    si.push(cur.left.val + sum);
                }
            }
        }
        return false;
    }
}
