//方法1: 递归法
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        return traversal(root, targetSum - root.val);
    }
    public boolean traversal(TreeNode root, int count){
        //遇到叶子结点且计数为0
        if(root.left == null && root.right == null && count == 0) return true;
        //遇到叶子结点计数不为0
        if(root.left == null && root.right == null) return false; //直接返回

        if(root.left != null){ //左
            count -= root.left.val; //累减
            if(traversal(root.left, count)){//递归
                return true;
            }
            count += root.left.val; //回溯
        }
        if(root.right != null){ //右
            //递归 回溯隐藏在 count - root.right.val
            if(traversal(root.right, count - root.right.val)){
                return true;
            }
        }
        return false;
    }
}
