class Solution {
    public List<List<Integer>> resList = new ArrayList<List<Integer>>();

    public List<List<Integer>> levelOrder(TreeNode root) {
        bfsFun(root);

        return resList;
    }
    //广度优先BFS-->迭代方式(队列)
    public void bfsFun(TreeNode node){
        if(node == null){
            return;
        }
        Queue<TreeNode> que = new LinkedList<TreeNode>();
        que.offer(node);

        while(!que.isEmpty()){
            List<Integer> itemList = new ArrayList<Integer>();//记录每一层的元素
            int len = que.size();//记录当前队列的个数即当前高度结点的个数
            while(len > 0){
                TreeNode temp = que.poll();//取出队头元素
                itemList.add(temp.val);//记录元素
                if(temp.left != null){//把队头元素的左子结点入队
                    que.offer(temp.left);
                }
                if(temp.right != null){//把队头元素的右子结点入队
                    que.offer(temp.right);
                }
                len--;
            }
            resList.add(itemList);
        }
    }
}
