//方法1: 递归法 后序遍历
class Solution {
    //1.递归函数参数以及返回值
    public int sumOfLeftLeaves(TreeNode root) {
        //2.终止条件
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 0;
        //3.单层递归逻辑
        int leftValue = sumOfLeftLeaves(root.left); //左
        if(root.left != null && root.left.left == null && root.left.right == null){
            leftValue = root.left.val;
        }
        int rightValue = sumOfLeftLeaves(root.right); //右

        int sum = leftValue + rightValue;
        return sum; 
    }
}

//方法2: 迭代法 层序遍历
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;
        int sum = 0;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            int size = que.size();
            while(size-- > 0){
                TreeNode node = que.poll();
                if(node.left != null){ //左结点不为空
                    que.offer(node.left);
                    if(node.left.left == null && node.left.right == null){ //左叶子结点
                        sum += node.left.val;
                    }
                }
                if(node.right != null){
                    que.offer(node.right);
                }
            }
        }
        return sum;
    }
}
