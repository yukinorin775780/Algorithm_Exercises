//方法1: 递归法，后序遍历求root结点的高度
class Solution {
    public int maxDepth(Node root) {
        if(root == null) return 0;
        int depth = 0;
        if(root.children != null){
            for(Node child : root.children){
                depth = Math.max(depth, maxDepth(child));
            }
        }
        return depth + 1;
    }
}

//方法2:迭代法 层序遍历
class Solution {
    public int maxDepth(Node root) {
        if(root == null) return 0;
        int depth = 0;
        Queue<Node> que = new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            int size = que.size();
            depth++;
            while(size-- > 0){
                Node node = que.poll();
                for(int i = 0; i < node.children.size(); i++){
                    que.offer(node.children.get(i));
                }
            }
        }
        return depth;
    }
}
