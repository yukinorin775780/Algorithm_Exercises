//方法1: 层序遍历
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        int depth = 0;
        while(!que.isEmpty()){
            int size = que.size();
            while(size-- > 0){
                TreeNode temp = que.poll();
                if(temp.left != null) que.offer(temp.left);
                if(temp.right != null) que.offer(temp.right);
            }
            depth++;
        }
        return depth;
    }
}

//方法2: 递归法
class Solution {
    //1.递归函数的参数和返回值
    public int maxDepth(TreeNode root) {
        //2.终止条件
        if(root == null) return 0;
        //3.单层递归的逻辑
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return Math.max(leftDepth, rightDepth) + 1;
    }
}
