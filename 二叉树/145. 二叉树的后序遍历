//方法1: 递归法
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        postorder(root, res);
        return res;
    }

    public void postorder(TreeNode root, List<Integer> res){
        if(root == null){//终止条件
            return;
        }
        //后序遍历的搜索逻辑是左右中
        postorder(root.left, res);//左
        postorder(root.right, res);//右
        res.add(root.val);//中
    }
}

//方法2: 迭代法
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        //后序遍历是左右中
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);//先将中压入栈
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            res.add(node.val);
            if(node.left != null){//先压入左孩子
                stack.push(node.left);
            }
            if(node.right != null){//再压入右孩子
                stack.push(node.right);
            }
            
        }
        //循环完毕后顺序为中右左
        //翻转结果后顺序为左右中即后序遍历
        Collections.reverse(res);
        return res;
    }
}
