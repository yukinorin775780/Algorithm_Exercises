层序遍历
题目链接:
102.二叉树的层序遍历: https://leetcode.cn/problems/binary-tree-level-order-traversal/
107.二叉树的层序遍历II: https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/
199.二叉树的右视图: https://leetcode.cn/problems/binary-tree-right-side-view/
637.二叉树的层平均值: https://leetcode.cn/problems/average-of-levels-in-binary-tree/
429.N叉树的层序遍历: https://leetcode.cn/problems/n-ary-tree-level-order-traversal/
515.在每个树行中找最大值: https://leetcode.cn/problems/find-largest-value-in-each-tree-row/
116.填充每个节点的下一个右侧节点指针: https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/
117.填充每个结点的下一个右侧结点指针II: https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/
文章讲解/视频讲解: https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html

226.翻转二叉树 (优先掌握递归)
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html

101. 对称二叉树 （优先掌握递归）
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html

● 自己看到题目的第一想法：
102. 无
107. 无
199. 无
637. 层序遍历，内层循环时记录sum，每次内层循环结束后记录平均值(在外层循环内)。
429. 层序遍历，内层循环中对每个结点的孩子进行循环。
515. 层序遍历，内层循环中找最大值。
116. 层序遍历...
117. 层序遍历，与116无差别。
226. 
101.

● 看完代码随想录之后的想法：
层序遍历: 通过队列的形式外循环条件是队列不为空，把每一高度的元素录入，录入后记录size，并用size作为循环条件一边出队记录一边将出队元素的左子结点和右子结点记录入队，size=0即当前高度的所有结点已经记录入队后结束内循环。
102. 层序遍历输出结果即可。
107. 层序遍历记录结果后翻转即可。
199. 层序遍历的时候判断是否遍历到单层最后的元素，如果是就放入result数组。
637. 思路一致。
429. 思路一致。
515. 思路一致。
116. 层序遍历，在单层遍历的时候记录下本层的头部结点，然后在遍历的时候让前一个结点指向本结点。
117. 如果用的是层序遍历的方法，和116无差别。因为无论是否为完整二叉树层序遍历都会遍历到每一层的每个结点。
226. 
101.

● 自己实现过程中遇到哪些困难或者错误：
102. 内外双循环，注意每个循环条件。
107. 当内循环使用while(size > 0)时要谨记循环内需要 size--;
199. size == 0 时 说明 队列已空，循环内弹出的元素为最后一个元素。
637. 无
429. 注意Node的结构，其中子节点是一个List.所以在判断是否有子结点时要注意语法。
515. 循环内比较大小可以用 Math.max(xxx, xxx)取循环中的最大值。
116. 理解: 在循环中有右侧结点的结点的next会指向右侧结点，但没有右侧结点的就没有修改即为null，因为所有next指针初始化为null。
117. 116和117的解题可以互相转换。因为都是树的层序遍历。
226. 
101.
