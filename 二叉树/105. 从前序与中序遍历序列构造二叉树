class Solution {
    Map<Integer, Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        map = new HashMap<>();
        for(int i = 0; i < inorder.length ; i++){
            map.put(inorder[i], i);
        }

        return findNode(preorder, 0, preorder.length, inorder, 0, inorder.length);//左闭右开
    }
    public TreeNode findNode(int[] preorder, int preBegin, int preEnd, int[] inorder, int inBegin, int inEnd){
        //参数范围都是左闭右开
        if(preBegin >= preEnd || inBegin >= inEnd){ //不满足左闭右开，说明没有元素，返回
            return null;
        }
        int rootIndex = map.get(preorder[preBegin]);//找到前序序列的第一个元素在中序序列中的位置
        TreeNode root = new TreeNode(inorder[rootIndex]);//构造中结点
        int lenOfLeft = rootIndex - inBegin;//保存中序左子树的个数，用来确定前序序列左子树的个数
        root.left = findNode(preorder, preBegin + 1, preBegin + lenOfLeft + 1, inorder, inBegin, rootIndex);
        root.right = findNode(preorder, preBegin + lenOfLeft + 1, preEnd, inorder, rootIndex + 1, inEnd);

        return root;
    }
}
