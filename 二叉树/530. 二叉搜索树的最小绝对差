//方法1: 双指针递归 中序遍历
class Solution {
    TreeNode pre;//记录遍历的上一个结点
    int res = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        if(root == null) return 0;
        traversal(root);
        return res;
    }

    public void traversal(TreeNode root){
        if(root == null) return;
        //左
        traversal(root.left);
        //中
        if(pre!=null)
            res = Math.min(res, root.val - pre.val);
        pre = root;
        //右
        traversal(root.right);
    }
}

//方法2: 迭代法 中序遍历
class Solution {
    TreeNode pre;
    Stack<TreeNode> stack;
    public int getMinimumDifference(TreeNode root) {
        if(root == null) return 0;
        stack = new Stack<>();
        TreeNode cur = root;
        int res = Integer.MAX_VALUE;
        while(cur != null || !stack.isEmpty()){
            if(cur != null){
                stack.push(cur);//将访问的结点压入栈
                cur = cur.left; //左
            }else{
                cur = stack.pop();
                if(pre != null){//中
                    res = Math.min(res, cur.val - pre.val);
                }
                pre = cur;
                cur = cur.right;//中
            }
        }
        return res;
    }
}
