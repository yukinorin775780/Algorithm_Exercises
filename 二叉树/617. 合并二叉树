//方法1: 迭代法 队列
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1 == null) return root2;
        if(root2 == null) return root1;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root1);
        que.offer(root2);
        while(!que.isEmpty()){
            TreeNode cur1 = que.poll();
            TreeNode cur2 = que.poll();
            //此时两个结点一定不为空，val相加合并
            cur1.val = cur1.val + cur2.val;
            //如果两棵树的左结点都不为空，同时加入队列
            if(cur1.left != null && cur2.left != null){
                que.offer(cur1.left);
                que.offer(cur2.left);
            }
            //如果两棵树的右结点不为空，同时加入队列
            if(cur1.right != null && cur2.right != null){
                que.offer(cur1.right);
                que.offer(cur2.right);
            }
            //cur1左结点为空 and cur2左结点不为空
            if(cur1.left == null && cur2.left != null){
                cur1.left = cur2.left;
            }
            //cur1右结点为空 and cur2右结点不为空
            if(cur1.right == null && cur2.right != null){
                cur1.right = cur2.right;
            }
        }
        return root1;
    }
}

//方法2: 递归法 前序遍历
class Solution {
    //1.递归函数的参数和返回值
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        //2.终止条件
        if(root1 == null) return root2;
        if(root2 == null) return root1;
        //3.单层递归逻辑 前序遍历
        root1.val += root2.val;
        root1.left = mergeTrees(root1.left , root2.left);
        root1.right = mergeTrees(root1.right, root2.right);

        return root1;
    }
}
