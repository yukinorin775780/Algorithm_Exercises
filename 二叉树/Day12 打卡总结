理论基础
文章讲解: https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html
要精通怎么去定义一个二叉树。


用递归遍历/迭代遍历解决题目:
144. 二叉树的前序遍历: https://leetcode.cn/problems/binary-tree-preorder-traversal/
145. 二叉树的后序遍历: https://leetcode.cn/problems/binary-tree-postorder-traversal/
94. 二叉树的中序遍历: https://leetcode.cn/problems/binary-tree-inorder-traversal/

递归遍历 （必须掌握）
文章讲解/视频讲解: https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86.html

迭代遍历 （基础不好的录友，迭代法可以放过）
文章讲解/视频讲解: https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86.html

统一迭代 （基础不好的录友，迭代法可以放过）
文章讲解: https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.html

● 自己看到题目的第一想法：
无
● 看完代码随想录之后的想法：
首先要能手写出二叉树的定义。
其次要精通递归三要素，理清递归三要素可以更好的正确写出递归函数: 
1. 确定递归函数的参数和返回值
2. 确定终止条件
3. 确定单层递归的逻辑
递归遍历: 递归时的顺序由前中后序搜索顺序来决定，比如在前序遍历/中序遍历/后序遍历中，搜索逻辑是中左右/左中右/左右中，那么递归时单层递归的逻辑顺序就是搜索的逻辑。

迭代遍历: 一般来说可以用栈来解决递归问题。
前序遍历: 前序遍历是中左右，每次先处理中结点，所以先将根结点放入栈中，然后将右孩子加入栈，再加入左孩子(栈是先进后出，所以先进右才能实现后出右)。
后序遍历: 后续遍历是左右中，在前序遍历的基础上可以将左右孩子放入栈的顺序调换，即先将左孩子入栈，再将右孩子入栈，得到的结果是中右左，再通过数组的颠倒(reverse)使结果变成左右中即为后序遍历。
中序遍历: 中序遍历是中左右，不能在前序遍历的基础上实现，原因是中序遍历的遍历结点的顺序和处理结点的顺序不一致。
         其实现的思路是先将当前结点压入栈，并让指针跳到当前结点的左节点。如果左结点为空就弹出栈并将指针跳到当前结点的右结点。

统一迭代法: 核心思想是将访问的结点压入栈中，同时也把要处理的结点也放入栈中并做标记(紧接着放入一个空指针作为标记)。
前序遍历: 顺序是右左中，先把右结点压入栈，再把左节点压入栈，最后把中结点压入栈并加入空结点做标记。在循环的过程中遇到空结点就弹出栈顶元素输出。
中序遍历: 顺序是右中左，先把右结点压入栈，再把中节点压入栈并加入空结点做标记，最后把左结点压入栈。在循环的过程中遇到空结点就弹出栈顶元素输出。
后序遍历: 顺序是中右左，先把中结点压入栈并加入空结点做标记，再把右节点压入栈，最后把左结点压入栈。在循环的过程中遇到空结点就弹出栈顶元素输出。

● 自己实现过程中遇到哪些困难或者错误：
无

