110.平衡二叉树 （优先掌握递归）
题目链接: https://leetcode.cn/problems/balanced-binary-tree/
文章讲解/视频讲解: https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html

257. 二叉树的所有路径 （优先掌握递归）
题目链接: https://leetcode.cn/problems/binary-tree-paths/
文章讲解/视频讲解: https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html

404.左叶子之和 （优先掌握递归）
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html

● 自己看到题目的第一想法：
110. 后序遍历，返回当前结点的左右结点高度差，若高度差>1则直接返回false.
257. 因为是要返回从根结点到叶子结点的路径，所以需要前序遍历，但具体怎么实现没有想法。
404.

● 看完代码随想录之后的想法：
110. 思路一致。递归三部曲分析：
     1. 明确递归函数的参数和返回值: 参数: 根结点 ; 返回值: 当前传入结点的高度 
     2. 明确终止条件: 递归的过程中依然是遇到空结点就终止递归，返回0，表示当前结点的树的高度为0.
     3. 明确单层递归的逻辑: 通过判断当前传入结点的左右子树高度差值来判断是否为平衡二叉树。分别计算出左右子树的高度，如果差值绝对值<=1则返回当前二叉树高度，否则返回-1，表示已经不再是平衡二叉树。
     当然也有迭代法的思路。通过层序遍历记录下每一个结点的高度，再通过栈来模拟后序遍历，遍历每一个结点的时候判断其左右孩子的高度是否符合要求即高度差值<=1。(并未实现，只是思路)
257. 递归三部曲分析:
     1. 确定递归函数参数以及返回值: 要传入根节点，记录每一条路径的path，和存放结果集的result，这里递归不需要返回值.
     2. 确定递归终止条件: 终止条件是找到了叶子结点时停止。
     3. 确定单层递归逻辑: 需要先处理中间结点，中间结点就是要记录路径上的结点，先放进path中，然后是递归和回溯。
     如果为空就不进行下一次递归，所以递归前要加上判断语句———判断左节点/右结点是否为空。
     回溯的实现就是在递归之后要弹出末端元素，即已经输出到了叶子结点后弹出叶子结点。(递归和回溯要深度绑定，一一对应)。
404.

● 自己实现过程中遇到哪些困难或者错误：
110. 无
257. 大致可以理解意思。通过画图来巩固理解。
404.
