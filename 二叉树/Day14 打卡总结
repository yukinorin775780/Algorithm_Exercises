104.二叉树的最大深度 （优先掌握递归）; 559.N叉树的最大深度: https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/
题目链接: https://leetcode.cn/problems/maximum-depth-of-binary-tree/
文章讲解/视频讲解: https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html

111.二叉树的最小深度 （优先掌握递归）
题目链接: https://leetcode.cn/problems/minimum-depth-of-binary-tree/
文章讲解/视频讲解: https://programmercarl.com/0111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.html

222.完全二叉树的节点个数（优先掌握递归）
题目链接: https://leetcode.cn/problems/count-complete-tree-nodes/
文章讲解/视频讲解: https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html

● 自己看到题目的第一想法：
104. 在学习层序遍历的时候做过。可以通过层序遍历，内循环中遍历完一层后depth++。
559. 与104一样，同样也可以使用层序遍历。
111. 在学习层序遍历的时候做过。可以通过层序遍历，内循环中判断如果左右子结点都为空时直接返回当前深度。
222. 层序遍历。在内层循环中每poll一个元素就res++。

● 看完代码随想录之后的想法：
104. 求树的高度用的是后序遍历，求树的深度用的是前序遍历。在很多题解中写的其实都是后序遍历，其实是不对的。但为什么答案是正确的呢？——> 是因为根结点的高度其实就是树的最大深度。答案一致但求的结果不一致。
     其中最重要的单层递归逻辑是：先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值 再+1 （加1是因为算上当前中间节点）就是目前节点为根节点的树的深度。
559. 与104一样也可以使用求树的高度的方法即后序遍历来实现求树的最大深度。
111. 同104，也可以通过后序遍历求出最小高度同时也是树的最小深度。但是不同的点在于需要判断左子树和右子树是否为空的逻辑。如果左子树为空右子树不为空，那么最小深度是右子树深度+1；反之是左子树深度+1。
222. 用递归(后序遍历)和层序遍历都可以实现得到普通二叉树的结点数量。但是题目说的是完全二叉树，所以有特性:  满二叉树的结点个数是 2^(深度) - 1 . 
     可以判断子树是否为满二叉树来实现更少的遍历(通过遍历二叉树的左侧和右侧的高度是否相等来判断是否为满二叉树，这样就满二叉树中的内部结点就不用被遍历到，节省了时间)。
     因为是完全二叉树所以只用遍历树的左侧和右侧，中间一定是有结点的。

● 自己实现过程中遇到哪些困难或者错误：
104. 无 
559. 无
111. 注意最大深度和最小深度之间的区别。最小深度是叶子结点到根的最小距离距离。一定是叶子结点。如果缺少左子树/右子树那么树的最小深度也不是1。是左子树/右子树的最小深度+1.
222. 无
