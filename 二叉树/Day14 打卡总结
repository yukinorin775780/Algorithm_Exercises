104.二叉树的最大深度 （优先掌握递归）
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html

111.二叉树的最小深度 （优先掌握递归）
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.html

222.完全二叉树的节点个数（优先掌握递归）
题目链接: 
文章讲解/视频讲解: https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html

● 自己看到题目的第一想法：
104. 在学习层序遍历的时候做过。可以通过层序遍历，内循环中遍历完一层后depth++。
111. 
222. 

● 看完代码随想录之后的想法：
104. 求树的高度用的是后序遍历，求树的深度用的是前序遍历。在很多题解中写的其实都是后序遍历，其实是不对的。但为什么答案是正确的呢？——> 是因为根结点的高度其实就是树的最大深度。答案一致但求的结果不一致。
     其中最重要的单层递归逻辑是：先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值 再+1 （加1是因为算上当前中间节点）就是目前节点为根节点的树的深度。
111.
222.

● 自己实现过程中遇到哪些困难或者错误：
104. 无
111.
222.
