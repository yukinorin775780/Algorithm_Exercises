//方法1: 递归法
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){//当前结点为空,说明找到了合适的位置,创建结点并返回
            return new TreeNode(val);
        }
        if(root.val < val){//当前结点值 < 目标结点值
            root.right = insertIntoBST(root.right,val);//递归右子树
        }else if(root.val > val){//当前结点值 > 目标结点值
            root.left = insertIntoBST(root.left,val);//递归左子树
        }
        return root;
    }
}

//方法2: 迭代法
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){//当前结点为空,说明找到了合适的位置,创建结点并返回
            return new TreeNode(val);
        }
        TreeNode newRoot = root;//记录根结点
        TreeNode pre = root;//记录父结点
        while(root != null){
            pre = root;
            if(root.val > val){//当前结点值 > 目标结点值
                root = root.left;
            }else if(root.val < val){//当前结点值 < 目标结点值
                root = root.right;
            }
        }
        //找到了目标位置的父结点
        if(pre.val > val){//父结点值 > 目标值
            pre.left = new TreeNode(val);
        }else{//父结点值 < 目标值
            pre.right = new TreeNode(val);
        }
        return newRoot;
    }
}
