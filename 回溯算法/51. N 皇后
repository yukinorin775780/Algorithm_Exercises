class Solution {
    List<List<String>> res = new ArrayList<>();//结果集
    public List<List<String>> solveNQueens(int n) {
        //初始化棋盘
        char[][] chessboard = new char[n][n];
        for(char[] c : chessboard){
            Arrays.fill( c, '.');
        }
        backtracking(n,0,chessboard);
        return res;
    }

    private void backtracking(int n, int row, char[][] chessboard){
        //终止条件
        if(row == n){
            res.add(Array2List(chessboard));
            return;
        }
        //单层递归逻辑
        for(int col = 0; col < n; col++){
            if(isVaild(row,col,n,chessboard)){
                chessboard[row][col] = 'Q';
                //递归
                backtracking(n,row+1,chessboard);
                //回溯
                chessboard[row][col] = '.';
            }
        }
    }

    private List Array2List(char[][] chessboard){
        List<String> list = new ArrayList();
        for(char[] c : chessboard){
            list.add(String.copyValueOf(c));
        }
        return list;
    }

    private boolean isVaild(int row, int col, int n, char[][] chessboard){
        //检查列
        for(int i = 0; i < row ; i++){// i < low 剪枝
            if(chessboard[i][col] == 'Q'){
                return false;
            }
        }
        //检查45度对角线
        for(int i = row-1, j = col-1; i>=0 && j>=0; i--,j--){
            if(chessboard[i][j] == 'Q'){
                return false;
            }
        }
        //检查135度对角线
        for(int i = row-1, j = col + 1 ; i>=0 && j<=n-1; i--,j++){
            if(chessboard[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }
}
