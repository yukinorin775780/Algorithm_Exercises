class Solution {
    LinkedList<String> res;
    LinkedList<String> path = new LinkedList<>();
    public List<String> findItinerary(List<List<String>> tickets) {
        //根据每个子列表的第二个元素对 "tickets" 列表进行升序排序。
        Collections.sort(tickets, (a,b) -> a.get(1).compareTo(b.get(1)));
        path.add("JFK");
        boolean[] used = new boolean[tickets.size()];
        backtracking((ArrayList)tickets,used);
        return res;
    }

    public boolean backtracking(ArrayList<List<String>> tickets, boolean[] used){
        //2.终止条件: 机场个数 = 航班数量+1 找到了一个行程
        if(path.size() == tickets.size() + 1){
            res = new LinkedList(path);
            return true;
        }
        //3.单层搜索逻辑
        for(int i = 0; i < tickets.size(); i++){
            //当前元素未被使用 且 当前元素的 比如 ["JFK","LGA"] 的 第0个元素 "JFK" 和 路径中最后一个元素 即表示该机票可以使用
            if(!used[i] && tickets.get(i).get(0).equals(path.getLast())){
                //把机票的目的地加入路径
                path.add(tickets.get(i).get(1));
                used[i] = true;//标记为已使用
                //递归
                if(backtracking(tickets,used)){
                    return true;
                }
                //回溯
                used[i] = false;
                path.removeLast();
            }
        }
        return false;
    }
}
