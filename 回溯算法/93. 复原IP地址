//方法1: 利用pointNum:添加'.'的数量和isVaild方法来实现 效率较低
class Solution {
    List<String> result = new ArrayList<>();
    public List<String> restoreIpAddresses(String s) {
        if(s.length() > 12) return result;//算是剪枝...
        backtracking(s, 0, 0);
        return result;
    }

    private void backtracking(String s, int startIndex, int pointNum){
        if(pointNum == 3){//'.'的数量为3时，分割结束
            //判断第四段字符串是否合法，如果合法就放进result
            if(isVaild(s, startIndex, s.length() - 1)){
                result.add(s);
            }
            return;
        }
        for(int i = startIndex; i < s.length(); i++){
            //判断当前字符串是否合法，合法就进行分割
            if(isVaild(s, startIndex, i)){
                //在分割处加'.'
                s = s.substring(0, i+1) + "." + s.substring(i+1);
                pointNum++;
                //插入'.'之后下一个子串的起始位置为 i+2
                backtracking(s, i+2, pointNum);
                //回溯
                pointNum--;
                s = s.substring(0, i+1) + s.substring(i+2);//回溯删掉'.'
            }else{
                break;
            }
        }
    }
    //左闭右闭
    private boolean isVaild(String s, int start, int end){
        if(start > end){//传入参数不合法
            return false;
        }
        if(s.charAt(start) == '0' && start != end){//0开头的数字不合法; start == end时说明仅有一个字符'0' 是合法的
            return false;
        }
        int num = 0;
        for(int i = start; i <= end ; i++){
            if(s.charAt(i) > '9' || s.charAt(i) < '0'){//遇到非数字字符不合法
                return false;
            }
            num = num * 10 + (s.charAt(i) - '0');//将字符串转int
            if(num > 255){//数字大于255不合法
                return false;
            }
        }
        return true;
    }
}

//方法2: 通过更好的剪枝操作 优化
class Solution {
    List<String> result = new ArrayList<>();
    StringBuilder sb = new StringBuilder();
    public List<String> restoreIpAddresses(String s) {
        backtracking(s, 0, 0);
        return result;
    }

    //number表示sb中ip段的数量
    private void backtracking(String s, int start, int number){
        //如果start == s.length() 并且 ip段的数量是4则加入结果集，并返回
        if(start == s.length() && number == 4){
            result.add(sb.toString());
            return;
        }
        //如果start == s.length() 但 ip段的数量!=4,或者ip段的数量为4但是start小于s的长度，直接返回
        if(start == s.length() || number == 4){
            return;
        }
        //剪枝: ip段的长度最大是3，并且ip段处于[0,255]
        for(int i = start; i < s.length() && i - start < 3 && Integer.parseInt(s.substring(start, i + 1)) >= 0 && Integer.parseInt(s.substring(start, i + 1)) <= 255; i++){
            //如果ip段的长度 > 1 ，并且 0 位于第一位的话,continue
            if( i - start + 1 > 1 && s.charAt(start) - '0' == 0){
                continue;
            }
            sb.append(s.substring(start,i + 1));
            //当sb里的ip数量<3时才会加'.';如果 =3 则说明已经有3段了，最后一段不需要。
            if(number < 3){
                sb.append(".");
            }
            number++;
            //递归
            backtracking(s, i+1, number);
            number--;
            //删除当前sb最后一个网段，注意考虑点的数量问题
            sb.delete(start + number, i + number + 2);
        }
    }
}
