//方法1: 暴力回溯
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> combine(int n, int k) {
        backtracking(n,k,1);
        return result;
    }
    //1.递归函数的参数和返回值
    private void backtracking(int n, int k, int startIndex){
        //2.终止条件
        if(path.size() == k){
            result.add(new ArrayList<>(path));
            return;
        }
        //3.确定单层搜索/递归逻辑
        for(int i = startIndex; i <= n ; i++ ){
            path.add(i);
            backtracking(n,k,i+1);
            path.removeLast();
        }
    }
}

//方法2: 回溯 + 剪枝
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> combine(int n, int k) {
        backtracking(n,k,1);
        return result;
    }
    //1.递归函数的参数和返回值
    private void backtracking(int n, int k, int startIndex){
        //2.终止条件
        if(path.size() == k){
            result.add(new ArrayList<>(path));
            return;
        }
        //3.确定单层搜索/递归逻辑
        for(int i = startIndex; i <= n - (k - path.size()) + 1; i++ ){//剪枝操作
            path.add(i);
            backtracking(n,k,i+1);
            path.removeLast();
        }
    }
}
