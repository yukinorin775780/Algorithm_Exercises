216.组合总和III
题目链接: https://leetcode.cn/problems/combination-sum-iii/
文章讲解: https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html
视频讲解: https://www.bilibili.com/video/BV1wg411873x

17.电话号码的字母组合
题目链接: https://leetcode.cn/problems/letter-combinations-of-a-phone-number/
文章讲解: https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html
视频讲解: https://www.bilibili.com/video/BV1yV4y1V7Ug

● 自己看到题目的第一想法：
216. 跟77.组合基本一致。
17. 回溯算法的实现跟77.组合也差不多，但是需要做数字到字母的映射。可以通过字符串数组和下标来进行映射。但是有点想不明白怎么搜索和终止条件。

● 看完代码随想录之后的想法：
216. 回溯三部曲:
     1.确定递归函数参数: 目标和n, k个数的集合, sum已经收集的元素和, startIndex下一层for循环的起始位置 
     2.确定终止条件: path.size() == k 就终止了，此时判断如果收集到的元素和 sum == 目标和n 就将结果收集到result中
     3.单层搜索过程: for循环，从startIndex位置起始;i<=9;i++{sum += i; 添加元素i到path中，进行递归操作，回溯将i推出path的同时sum也要 - i}
     剪枝操作: 
     1. 当前的收集到的元素和已经大于目标和 return 
     2. for循环中 i <= 9 - (k - path.size()) + 1 : 意义在于在循环过程中，已经取到了 path.size() 个元素，那么还需要 k - path.size() 个元素。在数组[1,9]之间，至多取到 9 - (k - path.size()) + 1 时才能满足后面的元素够取。
     举个例子: 如果k=2,path.size() = 0时，那么 9-(2-0)+1=8. i<=8 意味着 i取到8时才能保证后面还有足够的元素可以取。如果可以取到的元素不够就不用循环，剪枝。
17. 每次做回溯算法题目时，都要弄清楚树的深度和宽度由什么来决定。比如这题树的深度是由输入数字的个数决定，树的宽度是由每个数字代表多少个字母来决定。回溯三部曲:
     1.确定递归函数参数: 数字组合String digits, 当前递归遍历到 index 个数字
     2.确定终止条件: index == digits.size()时结束，将单条路径收获的StringBuilder temp 放入结果集。
     3.单层搜索过程: 首先先取出数字 digits.charAt[index] - '0'; 并找到对应的字符串 String str = numString[digits.charAt[index] - '0']; for循环从0开始到 str.length(); 添加当前到temp路径，递归，回溯。

● 自己实现过程中遇到哪些困难或者错误：
216. 注意回溯时不仅要移除path最后一个元素，sum 也需要 -= i !!! 也要理解剪枝操作中 i <= 9 - (k - path.size()) + 1 的含义。
17. 无
