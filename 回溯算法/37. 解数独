class Solution {
    public void solveSudoku(char[][] board) {
        backtracking(board);
    }
    
    private boolean backtracking(char[][] board){
        //一个for循环遍历棋盘的行，一个for循环遍历棋盘的列
        //一行一列确定下来之后，递归遍历这个位置放9个数字的可能性
        for(int i = 0; i < 9; i++){//遍历行
            for(int j = 0 ; j < 9 ; j++){//遍历列
                if(board[i][j] != '.'){//跳过原始数字
                    continue;
                }
                for(char k = '1' ; k <= '9' ; k++){//在(i,j)这个位置放 [1,9]是否合适
                    if(isVaildSudoku(i, j, k, board)){
                        board[i][j] = k;
                        if(backtracking(board)){//一旦找到合适就立刻返回
                            return true;
                        }
                        //回溯
                        board[i][j] = '.';
                    }
                }
                //9个数试完了都不行
                return false;
                //因为如果一行一列确定下来了，这里尝试了9个数字都不行，说明这个棋盘找不到解决答案
                //那么会直接返回，「这就是为什么没有终止条件也不用永远填不满棋盘而无限递归下去！」
            }
        }
        //遍历完所有需要填的位置都没有返回false，说明找到了答案
        return true;
    }
    /**
    *判断棋盘是否合法有如下三个维度:
    *   1.同行是否重复
    *   2.同列是否重复
    *   3.9宫格内是否重复 
    */
    private boolean isVaildSudoku(int row, int col, char val, char[][] board){
        //同行是否重复
        for(int i = 0; i < 9 ; i++){
            if(board[row][i] == val) return false;
        }
        //同列是否重复
        for(int j = 0; j < 9 ; j++){
            if(board[j][col] == val) return false;
        }
        //9宫格内是否重复
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for(int i = startRow ; i < startRow + 3; i++){
            for(int j = startCol ; j < startCol + 3; j++){
                if(board[i][j] == val) return false;
            }
        }
        return true;
    }
}
