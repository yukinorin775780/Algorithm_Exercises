理论基础
文章讲解: https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html
视频讲解: https://www.bilibili.com/video/BV1cy4y167mM

回溯算法可以解决:
1. 组合问题: N个数里面按一定规则找出k个数的集合
2. 切割问题: 一个字符串按一定规则有几种切割方式
3. 子集问题: 一个N个数的集合里有多少符合条件的子集
4. 排列问题: N个数按一定规则全排列，有几种排列方式
5. 棋盘问题: N皇后，解数独等等

回溯算法抽象，可以通过树形结构来理解回溯算法。

77. 组合
题目链接: https://leetcode.cn/problems/combinations/
文章讲解: https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html
视频讲解: https://www.bilibili.com/video/BV1ti4y1L7cv
剪枝操作: https://www.bilibili.com/video/BV1wi4y157er

● 自己看到题目的第一想法：
77. 没有想法，因为不知道要多大个数的组合，如果k=2的话就可以两层for循环暴力检索，但如果k很大的话就要k层for循环，难以实现。

● 看完代码随想录之后的想法：
77. 回溯法通过递归来实现嵌套多少层for循环。一层递归就是一层for循环。每一个回溯算法都可以套回溯三部曲的模版:
    1. 确定递归函数的参数和返回值: 
    一般都是void, 参数是一个一维数组path(路径，因为在树形结构中每一个结果就像是一条路径),一个二维数组result(收集每一条结果),以及本题的n,k，同时还需要一个startIndex用作取每一层递归的起始位置。
    2. 确定终止条件: 到达树形结构的叶子结点，在本题中是一个大小为k的path时，在result收集path，然后return退出遍历。
    3. 确定单层搜索/递归逻辑: 在树形结构中每一个结点都是一个for循环，循环条件从startIndex开始，遍历到集合大小n。在for循环内收集路径结点，递归，回溯！！
    在此基础上可以进行剪枝操作，即缩小 for循环的搜索范围: i <= 

● 自己实现过程中遇到哪些困难或者错误：
77. 
