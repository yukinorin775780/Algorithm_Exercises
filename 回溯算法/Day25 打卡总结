491.递增子序列
题目链接: https://leetcode.cn/problems/non-decreasing-subsequences/
文章讲解: https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html
视频讲解: https://www.bilibili.com/video/BV1EG4y1h78v

46.全排列
题目链接: 
文章讲解: https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html
视频讲解: https://www.bilibili.com/video/BV19v4y1S79W

47.全排列 II
题目链接: 
文章讲解: https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html
视频讲解: https://www.bilibili.com/video/BV1R84y1i7Tm

● 自己看到题目的第一想法：
491. 此题与 90.子集II 有些相像，比如要做去重操作，有些不像的原因是答案收集有个数限制，即path.size() > 1。而且此题不能进行排序。通过之前的方法以及一些判断语句一起不能通过编译，会报错！
46. 
47. 

● 看完代码随想录之后的想法：
491. 去重操作与 90.子集II 不太一样！虽然都是“树层去重”，但是就题目的nums而言不是有序的，所以不能简单的用used[i-1]==false来判断之前的结点是否用过，因为两个一样的数字有可能不是贴在一起的，因为数组的无序的。这就是我的思路为什么错误的原因。
     回溯三部曲:
     1.递归函数参数: 全局变量: 二维数组结果集result, 一维数组单条搜索路径path. 函数参数: 题目自带的nums[] 和 startIndex用来告诉for循环从哪里开始遍历。
     2.终止条件: 不需要终止条件。
     需要一个局部变量map来记录当前树层用过的元素！
     3.单层搜索逻辑: for循环从startIndex开始遍历到nums.length。判断当前值 < 路径的最后一个元素 or 当前元素是否此树层用过{continue} 将该值记录到局部变量中，加入到path中，递归，回溯。
     局部变量也可以使用数组来记录。详见代码。
46. 
47. 

● 自己实现过程中遇到哪些困难或者错误：
491. 与 90.子集II 不一样的点在于 本题通过局部变量map来实现当前树层用过数值，不需要做回溯，而 90.子集II中的used[] 是需要回溯操作的。 要理解为什么本体的map不需要做回溯: 因为是局部变量 每一个 map 对应着本层的使用情况，到下一层后会重新创建一个map。
     用这种去重方式也可以解决 90.子集II 。
46. 
47. 
