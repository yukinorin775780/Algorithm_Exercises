435. 无重叠区间
题目链接: https://leetcode.cn/problems/non-overlapping-intervals/
文章讲解: https://programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html
视频链接: https://www.bilibili.com/video/BV1A14y1c7E1/

763.划分字母区间
题目链接: https://leetcode.cn/problems/partition-labels/
文章讲解: https://programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html
视频链接: https://www.bilibili.com/video/BV18G4y1K7d5/

56. 合并区间
题目链接: 
文章讲解: https://programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html
视频链接: 

● 自己看到题目的第一想法：
435. 先排序，后删除重叠部分最长的 不知道怎么实现...
763. 先统计每个字符首次出现在哪里以及最后一次出现在哪里，形成一个区间。有重叠区间的放一起。
56. 

● 看完代码随想录之后的想法：
435. 总体代码和射气球基本一致。 当前区间的左边界 >= 上一个区间的右边界 说明区间不重叠 else{区间重叠 count++; 当前右边界 = 取重叠区间右边界最小值} 
     当区间重叠时，count++，更改右边界最小值 相当于 移除了右边界大的区间。
763. 遍历序列时不断更新当前元素出现的最远位置，因为一旦包含了当前元素就必须包含到当前元素的最远位置。当遍历到最远位置时，这个位置之前里面的所有元素都被包含了。此时形成了一个区间。以此类推。
     
56. 

● 自己实现过程中遇到哪些困难或者错误：
435. 无
763. 难点在于怎么去得到一个每个字符出现的最后位置的数组: for循环 hash[s[i] - 'a'] = i; 遇到一个就更新一次哈希值，得到的就是一个最远位置的数组。
56. 
