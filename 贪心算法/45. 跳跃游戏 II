//方法1: 详细版
class Solution {
    public int jump(int[] nums) {
        if(nums.length == 1){
            return 0;
        }
        int step = 0;//步数
        int curCover = 0;//当前最大范围
        int maxCover = 0;//最大的覆盖区域
        for(int i = 0 ; i < nums.length; i++){
            //在可覆盖范围内更新最大的覆盖范围
            maxCover = Math.max(nums[i] + i , maxCover);
            //说明当前范围内中的一步，再跳一步可以到达终点
            if(maxCover >= nums.length - 1){
                step++;
                break;
            }
            //走到当前覆盖范围的最大值时，需要更新下一步来获得更大的覆盖范围
            if(i==curCover){
                curCover = maxCover;
                step++;
            }
        }
        return step;
    }
}

//方法2: 精简版
class Solution {
    public int jump(int[] nums) {
        int step = 0;
        //当前覆盖的最远距离下标
        int end = 0;
        //下一步覆盖的最远距离下标
        int temp = 0;
        for(int i = 0; i <= end && end < nums.length - 1 ; i++){
            temp = Math.max(nums[i] + i , temp);
            //可达位置的改编次数就是跳跃次数
            if(i == end){
                end = temp;
                step++;
            }
        }
        return step;
    }
}
